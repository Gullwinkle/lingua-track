import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ URL API
TELEGRAM_BOT_TOKEN = BOT_TOKEN  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
API_BASE_URL = 'http://localhost:8000/api'  # URL –≤–∞—à–µ–≥–æ Django API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç LinguaTrack. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n/today - —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n/test - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n/progress - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n/say <—Å–ª–æ–≤–æ> - –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ\n/cards - —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫')

@dp.message(Command('today'))
async def today(message: types.Message):
    telegram_id = str(message.from_user.id)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f'{API_BASE_URL}/today/?telegram_id={telegram_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    if data:
                        response_text = '\n'.join([f"{card['word']}: {card['translation']}" for card in data])
                        await message.reply(f'–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{response_text}')
                    else:
                        await message.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.')
                else:
                    await message.reply(f'–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –Ω–∞ —Å–∞–π—Ç–µ. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ /today: {str(e)}')
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.')

@dp.message(Command('cards'))
async def cards(message: types.Message):
    telegram_id = str(message.from_user.id)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f'{API_BASE_URL}/cards/?telegram_id={telegram_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    if data:
                        response_text = '\n'.join([f"{card['word']}: {card['translation']}" for card in data])
                        await message.reply(f'–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n{response_text}')
                    else:
                        await message.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.')
                else:
                    await message.reply(f'–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –Ω–∞ —Å–∞–π—Ç–µ. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ /cards: {str(e)}')
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.')

@dp.message(Command('progress'))
async def progress(message: types.Message):
    telegram_id = str(message.from_user.id)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f'{API_BASE_URL}/progress/?telegram_id={telegram_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    await message.reply(
                        f'–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n'
                        f'–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {data["total_cards"]}\n'
                        f'–í—ã—É—á–µ–Ω–æ: {data["learned_cards"]}\n'
                        f'–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {data["total_reviews"]}'
                    )
                else:
                    await message.reply(f'–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –Ω–∞ —Å–∞–π—Ç–µ. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ /progress: {str(e)}')
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.')

@dp.message(Command('say'))
async def say(message: types.Message):
    word = message.text.replace('/say ', '').strip()
    if not word:
        await message.reply('–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /say, –Ω–∞–ø—Ä–∏–º–µ—Ä: /say hello')
        return
    telegram_id = str(message.from_user.id)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f'{API_BASE_URL}/say/{word}/?telegram_id={telegram_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    audio_url = data.get('audio_url')
                    await message.reply_audio(audio=audio_url, title=word)
                else:
                    await message.reply(f'–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –Ω–∞ —Å–∞–π—Ç–µ. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞ "{word}": {str(e)}')
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞.')

@dp.message(Command('test'))
async def test(message: types.Message):
    telegram_id = str(message.from_user.id)
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(f'{API_BASE_URL}/test/?telegram_id={telegram_id}') as response:
                if response.status == 200:
                    data = await response.json()
                    if 'error' in data:
                        await message.reply(data['error'])
                        return
                    card = data['card']
                    choices = data['choices']
                    keyboard = ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text=choice['translation'])] for choice in choices],
                        resize_keyboard=True,
                        one_time_keyboard=True
                    )
                    await message.reply(
                        f'–°–ª–æ–≤–æ: {card["word"]}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥:',
                        reply_markup=keyboard
                    )
                else:
                    await message.reply(f'–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram ID –Ω–∞ —Å–∞–π—Ç–µ. –ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ /test: {str(e)}')
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞.')

@dp.message(F.text)
async def handle_test_answer(message: types.Message):
    telegram_id = str(message.from_user.id)
    answer = message.text
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                f'{API_BASE_URL}/test/submit/',
                json={'telegram_id': telegram_id, 'answer': answer}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if data['correct']:
                        await message.reply('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ', reply_markup=types.ReplyKeyboardRemove())
                    else:
                        await message.reply(
                            f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {data["correct_translation"]}',
                            reply_markup=types.ReplyKeyboardRemove()
                        )
                    await message.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.')
                else:
                    error_text = await response.text()
                    logging.error(f'–û—à–∏–±–∫–∞ API /test/submit/: –ö–æ–¥ {response.status}, –û—Ç–≤–µ—Ç: {error_text}')
                    await message.reply(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ö–æ–¥: {response.status}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Å—Ç–∞: {str(e)}')
            await message.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞.')

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())