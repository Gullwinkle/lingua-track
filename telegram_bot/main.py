import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, API_URL
from aiogram.types import FSInputFile
import tempfile


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(F.text == "/start")
async def start_command(message: Message):
    text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LinguaTrack Bot!*\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "üìå /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "üìÖ /today ‚Äî —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìà /progress ‚Äî –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏\n"
        "üß† /test ‚Äî —Ç–µ—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "üîä /say <—Å–ª–æ–≤–æ> ‚Äî –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ\n\n"
        "–£—Å–ø–µ—Ö–æ–≤ –≤ –æ–±—É—á–µ–Ω–∏–∏! üí™"
    )
    await message.answer(text, parse_mode="Markdown")

# telegram_bot/main.py
@dp.message(CommandStart(deep_link=True))
async def start_with_token(message: Message, command: CommandObject):
    token = command.args

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/link-telegram/", json={
            "telegram_id": message.from_user.id,
            "token": token
        }) as resp:
            if resp.status == 200:
                await message.answer("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")


@dp.message(F.text == "/today")
async def cmd_today(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/today/{message.from_user.id}/") as resp:
            if resp.status == 404:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            cards = await resp.json()

    if not cards:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚úÖ")
        return

    text = "\n".join([f"üìå <b>{c['word']}</b> ‚Äî {c['translation']}" for c in cards])
    await message.answer(text)

@dp.message(F.text == "/progress")
async def cmd_progress(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/progress/{message.from_user.id}/") as resp:
            if resp.status == 404:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            stats = await resp.json()

    await message.answer(f"üß† –í—Å–µ–≥–æ —Å–ª–æ–≤: {stats['total']}\nüîÅ –ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {stats['due']}")


@dp.message(F.text.startswith("/say"))
async def say_word(message: Message):
    word = message.text[5:].strip()
    if not word:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–ª–æ–≤–æ: /say apple")
        return

    url = f"{API_URL}/say/{word}/"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                audio_bytes = await resp.read()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp_file:
                    tmp_file.write(audio_bytes)
                    tmp_path = tmp_file.name

                voice = FSInputFile(tmp_path)
                await message.answer_voice(voice=voice)

            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Å–ª–æ–≤–æ üòï")


class TestState(StatesGroup):
    waiting_for_answer = State()



@dp.message(F.text == "/test")
async def start_test(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/test-question/{message.from_user.id}/") as resp:
            if resp.status != 200:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç üòï")
                return
            data = await resp.json()

    word = data["word"]
    options = data["options"]
    question_id = data["question_id"]

    buttons = []
    for option in options:
        callback_data = f"answer:{question_id}:{option['id']}"
        button = InlineKeyboardButton(text=option['translation'], callback_data=callback_data)
        buttons.append([button])  # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(f"üî§ –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: *{word}*?", parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("answer:"))
async def handle_answer(callback: CallbackQuery):
    _, correct_id, chosen_id = callback.data.split(":")
    correct = correct_id == chosen_id

    if correct:
        text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        text = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."

    await callback.answer()
    await callback.message.edit_reply_markup()
    await callback.message.answer(text)


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
