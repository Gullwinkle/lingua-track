import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.filters.command import CommandObject
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, API_URL


bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{API_URL}/register/",
            json={"telegram_id": message.from_user.id}
        ) as resp:
            if resp.status != 200:
                text = await resp.text()
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", resp.status, text)
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            result = await resp.json()

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞ üí¨")

# telegram_bot/main.py
@dp.message(CommandStart(deep_link=True))
async def start_with_token(message: Message, command: CommandObject):
    token = command.args

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/link-telegram/", json={
            "telegram_id": message.from_user.id,
            "token": token
        }) as resp:
            if resp.status == 200:
                await message.answer("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")


@dp.message(F.text == "/today")
async def cmd_today(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/today/{message.from_user.id}/") as resp:
            if resp.status == 404:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            cards = await resp.json()

    if not cards:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–ª–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è ‚úÖ")
        return

    text = "\n".join([f"üìå <b>{c['word']}</b> ‚Äî {c['translation']}" for c in cards])
    await message.answer(text)

@dp.message(F.text == "/progress")
async def cmd_progress(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/progress/{message.from_user.id}/") as resp:
            if resp.status == 404:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            stats = await resp.json()

    await message.answer(f"üß† –í—Å–µ–≥–æ —Å–ª–æ–≤: {stats['total']}\nüîÅ –ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é: {stats['due']}")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
